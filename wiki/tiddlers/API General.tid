created: 20250214172427100
modified: 20250315004108631
tags: APIs Analysis
title: API General
type: text/vnd.tiddlywiki

* Are you following the API REST industry standards?
> See [[Microsoft Azure REST Guidelines|https://github.com/microsoft/api-guidelines/blob/vNext/azure/Guidelines.md#representational-state-transfer-rest]].
* Are you following an API specification, such as OpenAPI (formerly Swagger Specification)?
> See [[Swagger Docs|https://swagger.io/docs/specification/about/]].
* Make sure that you setup the API from the beginning to support versioning.
> For example, you can have the version precede the controller path, such as /v1/{controller} or perhaps use a required query string parameter for the version.
> Versioning doesn't just applying to breaking changes but also updates that change behavior (such as changing error codes or adding rate limiting).
> Typically, you'll want to mark the old version as deprecated but you still support it for a specified amount of time (such as 2 years).
> Ideally, clients will be able to adopt new API versions without requiring additional code changes.
> New version should be backwards compatible and the client should only need to make code changes to take advantage of new features.
* Are all your methods idempotent (for allowing repeatable requests)?
> See something like [[Oasis Open's OData Repeatable Requests v1.0|https://docs.oasis-open.org/odata/repeatable-requests/v1.0/repeatable-requests-v1.0.html]].
* Does your API return error info in a standardized format to help the client troubleshoot on their end (such as including an error code, message, inner error, etc.)?
> Typically, top-level error codes are part of the API contract and changing them is considered a breaking changing--that's why it's useful to include inner errors/additional properties since those can typically be updated without worrying about incrementing the version.
* Is your API using the applicable HTTP method based on the action?
> POST for adding new items, PATCH for updating existing items, PUT for replacing items, etc.
* Is your API using the applicable HTTP response codes?
> 200 for OK, 201 for created, etc. If you don't want to leak the existence of a resource, then you may return 404 instead of 403-Forbidden.
* Verify you never return anything that should remain hidden. 
* Should you have an API Gateway that your API sits behind instead of exposing the API directly to the internet?
* Plan to follow the industry standards for naming API controllers, actions, etc.
> e.g. avoid using redundant names such as /phones/{id}/phoneNumber vs /phones/{id}/number
> For reference, see [[REST API Naming Conventions and Best Practices|https://medium.com/@nadinCodeHat/rest-api-naming-conventions-and-best-practices-1c4e781eb6a5]] or see the `Naming` heading in [[Graph API Guidelines|https://github.com/microsoft/api-guidelines/blob/vNext/graph/GuidelinesGraph.md]].